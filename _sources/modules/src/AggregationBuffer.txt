.. default-domain:: chpl

.. module:: AggregationBuffer
   :synopsis: TODO: Experiment with expanding buffer sizes

AggregationBuffer
=================
**Usage**

.. code-block:: chapel

   use AggregationBuffer;


TODO: Experiment with expanding buffer sizes

.. data:: config const AggregatorMaxBuffers = -1

.. data:: config const AggregatorBufferSize = 1024*1024

.. data:: config param AggregatorDebug = false

.. function:: proc debug(args ...?nArgs)

.. function:: proc debug(args ...?nArgs)

.. record:: Aggregator

   .. attribute:: type msgType

   .. attribute:: var instance: unmanaged AggregatorImpl(msgType)

   .. attribute:: var pid = -1

   .. method:: proc init(type msgType)

   .. method:: proc init(pid: int, instance)

   .. method:: proc init(other)

   .. method:: proc destroy()

   .. method:: proc _value

   .. method:: proc chpl__serialize(): (int, instance.type )

.. method:: proc type Aggregator.chpl__deserialize(chpl__tuple_arg_temp AppendType.02)

.. class:: Buffer

   
   Buffer contains the aggregated data that the user aggregates. The buffer,
   if returned to the user, must be recycled back to the buffer pool by invoking
   'done'.
   


   .. attribute:: type msgType

   .. method:: proc readWriteThis(f)

   .. method:: proc done()

      
      Recycles self back to buffer pool. Using the buffer after invoking this
      method is subject to undefined behavior.
      

   .. method:: proc this(idx: integral) ref

      
      Indexes into buffer. This will be remote if the buffer is.
      

   .. itermethod:: iter these(): msgType

      
      Iterates over buffer. The buffer is copied to current locale, so it will be local.
      

   .. itermethod:: iter these(param tag: iterKind): msgType

      
      Iterates over buffer in parallel. The buffer is copied to current locale so it will be local.
      

   .. itermethod:: iter these(param tag: iterKind): msgType

   .. itermethod:: iter these(param tag: iterKind, followThis): msgType

   .. method:: proc getPtr()

   .. method:: proc getDomain()

   .. method:: proc getArray()

   .. method:: proc size

   .. method:: proc cap

.. class:: AggregatorImpl

   .. attribute:: type msgType

   .. method:: proc init(type msgType)

   .. method:: proc init(other, pid: int)

   .. method:: proc deinit()

   .. method:: proc dsiPrivatize(pid)

   .. method:: proc dsiGetPrivatizeData()

   .. method:: proc getPrivatizedInstance()

   .. method:: proc aggregate(msg: msgType, loc: locale): unmanaged Buffer(msgType)

   .. method:: proc aggregate(msg: msgType, locid: int): unmanaged Buffer(msgType)

   .. itermethod:: iter flushGlobal(targetLocales = Locales): (unmanaged Buffer(msgType), locale)

   .. itermethod:: iter flushGlobal(targetLocales = Locales, param tag: iterKind): (unmanaged Buffer(msgType), locale)

   .. itermethod:: iter flushLocal(targetLocales = Locales): (unmanaged Buffer(msgType), locale)

   .. itermethod:: iter flushLocal(targetLocales = Locales, param tag: iterKind): (unmanaged Buffer(msgType), locale)

